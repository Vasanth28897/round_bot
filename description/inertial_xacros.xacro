<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="round_bot">

    <!-- Specify some standard inertial calculations https://en.wikipedia.org/wiki/List_of_moments_of_inertia -->
    <!-- These make use of xacro's mathematical functionality -->
    <xacro:property name="wheel_radius" value="0.08"/>
    <xacro:property name="wheel_length" value="0.05"/>
    <xacro:property name="wheel_mass" value="0.1"/>
    <xacro:property name="chassis_radius" value="0.35"/>
    <xacro:property name="chassis_length" value="0.1"/>
    <xacro:property name="chassis_mass" value="0.5"/>
    <xacro:property name="mount_radius" value="0.08"/>
    <xacro:property name="mount_length" value="0.05"/>
    <xacro:property name="mount_mass" value="0.1"/>
    <xacro:property name="lidar_radius" value="0.1"/>
    <xacro:property name="lidar_length" value="0.07"/>
    <xacro:property name="lidar_mass" value="0.1"/>
    <xacro:property name="caster_mass" value="0.1"/>
    <xacro:property name="caster_radius" value="0.05"/>

    <xacro:macro name="inertial_sphere" params="caster_mass caster_radius *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${caster_mass}" />
            <inertia ixx="${(2/5) * caster_mass * (caster_radius*caster_radius)}" ixy="0.0" ixz="0.0"
                    iyy="${(2/5) * caster_mass * (caster_radius*caster_radius)}" iyz="0.0"
                    izz="${(2/5) * caster_mass * (caster_radius*caster_radius)}" />
        </inertial>
    </xacro:macro>  


    <!-- <xacro:macro name="inertial_box" params="mass x y z *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${mass}" />
            <inertia ixx="${(1/12) * mass * (y*y+z*z)}" ixy="0.0" ixz="0.0"
                    iyy="${(1/12) * mass * (x*x+z*z)}" iyz="0.0"
                    izz="${(1/12) * mass * (x*x+y*y)}" />
        </inertial>
    </xacro:macro> -->


    <xacro:macro name="inertial_wheel_cylinder" params="wheel_mass wheel_length wheel_radius *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${wheel_mass}" />
            <inertia ixx="${(1/12) * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" ixy="0.0" ixz="0.0"
                    iyy="${(1/12) * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" iyz="0.0"
                    izz="${(1/2) * wheel_mass * (wheel_radius*wheel_radius)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="inertial_chassis_cylinder" params="chassis_mass chassis_length chassis_radius *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${chassis_mass}" />
            <inertia ixx="${(1/12) * chassis_mass * (3*chassis_radius*chassis_radius + chassis_length*chassis_length)}" ixy="0.0" ixz="0.0"
                    iyy="${(1/12) * chassis_mass * (3*chassis_radius*chassis_radius + chassis_length*chassis_length)}" iyz="0.0"
                    izz="${(1/2) * chassis_mass * (chassis_radius*chassis_radius)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="inertial_mount_cylinder" params="mount_mass mount_length mount_radius *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${mount_mass}" />
            <inertia ixx="${(1/12) * mount_mass * (3*mount_radius*mount_radius + mount_length*mount_length)}" ixy="0.0" ixz="0.0"
                    iyy="${(1/12) * mount_mass * (3*mount_radius*mount_radius + mount_length*mount_length)}" iyz="0.0"
                    izz="${(1/2) * mount_mass * (mount_radius*mount_radius)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="inertial_lidar_cylinder" params="lidar_mass lidar_length lidar_radius *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${lidar_mass}" />
            <inertia ixx="${(1/12) * lidar_mass * (3*lidar_radius*lidar_radius + lidar_length*lidar_length)}" ixy="0.0" ixz="0.0"
                    iyy="${(1/12) * lidar_mass * (3*lidar_radius*lidar_radius + lidar_length*lidar_length)}" iyz="0.0"
                    izz="${(1/2) * lidar_radius * (lidar_radius*lidar_radius)}" />
        </inertial>
    </xacro:macro>


</robot>